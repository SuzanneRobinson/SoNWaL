CoeffCond = 0.05,
fCalpha700 = 1.433,
fCg700 = 0.451,
fCalphax = 2.33333333333333,
fCg0 = 1.75,
MinCond = 0.015,
klmax = 0.01,
krmax = 0.00423943,
komax = 0.00045886,
hc = 0.2,
qir = 334.290515,
qil = 49.0841127,
qh = 23.6348669,
qbc = 2.21427684,
el = 0.24636719,
er = 0.56122150,
Nf = 0.00684,
Navm = 0.01,
Navx = 10,
leaf.grow = 0,
leaf.fall = 0,
Wl.s = 0.01,
Wsbr.s = 0.1,
Wr.s = 0.01,
pWl.sprouts = 0.5,
pWsbr.sprouts = 0.9,
cod.pred = "3PG",
cod.clim = "Month",
sigma_2R = 1
)
## Load the parameter set from the fifth calibration run to use as starting values
load("fifth_run_3pgn_all_data/par.Rdata")
sitka[nm]<-ff[which(names(ff)!="fNn"&names(ff)!="fN0")]
f.decrease <- c(0.588503613257886,0.752929538228874,0.956131627577964,0.050456035523466,0.384021499609213,0.250229439327847,0.57408236899746,0.909666760291794,0.853276910139941,0.974961101217424,1,0.636422367959785,0.732916669791679,0.443930919848964,0.741758519667562,0.816463641720414,0.221779786451702,0.303779963365252,1,0.00141038795075,0.730688961031379,0.899808741360758,0.024817372196732,0.99632339563598,0.996373181003088,0.999649942946159,0.996388219783102,0.998203040988276,0.998245174258832,0.97983098579238,0.913069476259938,0.961283723717706,0.950056672692535,0.893875965852296,0.991080780202615,0.990457295759556,0.99)
nm<-c("pFS2","pFS20","aS","nS","pRx","pRn","gammaFx","gammaF0","tgammaF","Rttover","mF","mR","mS","SLA0","SLA1","tSLA","alpha","Y","m0","MaxCond","LAIgcx","CoeffCond","BLcond","Nf","Navm","Navx","klmax","krmax","komax","hc","qir","qil","qh","qbc","el","er","sigma_2R")
sitka<-list(weather=clm.df.full,
## ~~ Initial pools ~~ ##
Wl = 0.01,
WlDormant = 0,
Wr = 0.01,
Wsbr = 0.1,
Wlitt = 0,
YrC = 42.95,
YlC = 85.90,
OC = 300.66,
YrN = 1.43,
YlN = 2.86,
ON = 10.01,
Nav = 8.76,
## ~~ Site ~~ ##
N = 2000,
rotation = 1,
cycle = 1,
rm.sprouts = F,
nyears = 35,
initial.month = 1,
latitude = 57.06,
soilclass = -1,
ASW = 165,
MaxASW = 300,
MinASW = 0,
CO2 = 400,
## ~~ Parameters ~~ ##
pFS2 = 1.4,
pFS20 = 0.8,
aS = 0.138,
nS = 2.3,
pRx = 0.45,
pRn = 0.3,
Tmin = -5,
Topt = 15,
Tmax = 35,
kF = 1,
SWconst0 = 0.55,
SWpower0 = 6,
m0 = 0,
MaxAge = 400,
nAge = 4,
rAge = 0.95,
gammaFx = 0.01888,
gammaF0 = 0.001,
tgammaF = 36,
Rttover = 0.017, #same as gammaR?
MaxCond = 0.02,
LAIgcx = 3.33,
BLcond = 0.2,
wSx1000 = 500,
thinPower = 1.5,
mF = 0.5,
mR = 0.3,
mS = 0.2,
SLA0 = 5,
SLA1 = 3,
tSLA = 3,
k = 0.5,
fullCanAge = 15,
MaxIntcptn = 0.15,
LAImaxIntcptn = 5,
alpha = 0.06,
Y = 0.47,
poolFractn = 0,
e20 = 2.2,
rhoAir = 1.2,
lambda = 2460000,
VPDconv = 0.000622,
fracBB0 = 0.15,
fracBB1 = 0.15,
tBB = 10,
rhoMin = 0.55,
rhoMax = 0.55,
tRho = 5,
Qa = -90,
Qb = 0.8,
gDM_mol = 24,
molPAR_MJ = 2.3,
CoeffCond = 0.05,
fCalpha700 = 1.433,
fCg700 = 0.451,
fCalphax = 2.33333333333333,
fCg0 = 1.75,
MinCond = 0.015,
klmax = 0.01,
krmax = 0.00423943,
komax = 0.00045886,
hc = 0.2,
qir = 334.290515,
qil = 49.0841127,
qh = 23.6348669,
qbc = 2.21427684,
el = 0.24636719,
er = 0.56122150,
Nf = 0.00684,
Navm = 0.01,
Navx = 10,
leaf.grow = 0,
leaf.fall = 0,
Wl.s = 0.01,
Wsbr.s = 0.1,
Wr.s = 0.01,
pWl.sprouts = 0.5,
pWsbr.sprouts = 0.9,
cod.pred = "3PG",
cod.clim = "Month",
sigma_2R = 1
)
nm<-c("pFS2","pFS20","aS","nS","pRx","pRn","gammaFx","gammaF0","tgammaF","Rttover","mF","mR","mS","SLA0","SLA1","tSLA","alpha","Y","m0","MaxCond","LAIgcx","CoeffCond","BLcond","Nf","Navm","Navx","klmax","krmax","komax","hc","qir","qil","qh","qbc","el","er","sigma_2R")
f.decrease <- c(0.588503613257886,0.752929538228874,0.956131627577964,0.050456035523466,0.384021499609213,0.250229439327847,0.57408236899746,0.909666760291794,0.853276910139941,0.974961101217424,1,0.636422367959785,0.732916669791679,0.443930919848964,0.741758519667562,0.816463641720414,0.221779786451702,0.303779963365252,1,0.00141038795075,0.730688961031379,0.899808741360758,0.024817372196732,0.99632339563598,0.996373181003088,0.999649942946159,0.996388219783102,0.998203040988276,0.998245174258832,0.97983098579238,0.913069476259938,0.961283723717706,0.950056672692535,0.893875965852296,0.991080780202615,0.990457295759556,0.99)
f.increase <- c(0.573973679288588,0.235352308855631,1.86098081013281,0.374136113325978,0.231957000781575,0.56202200140032,3.45793787115991,1.30349761255926,0.600615525746093,0.251944939128821,0.768680943537667,0.817888160201076,0.335416651041606,0.668207240453109,0.549448881994627,0.835363582795864,0.03762695139773,0.218385064110809,0.917925202458998,2.5949226033773,1.15448831174897,0.001912586392424,5.82627839462287,6.35320872803933,2.62681899691161,2.50057053840858,2.61178021689853,0.796959011723578,0.754825741168422,1.01690142076198,0.738610474801243,0.935813814114711,0.498299819223935,1.12248068295408,0.783843959477034,0.90854084808886,2)
pMaxima <- as.vector(unlist(sitka[nm])*(1+f.increase))
pMinima <- as.vector(unlist(sitka[nm])*(1-f.decrease))
pValues <- as.vector(unlist(sitka[nm]))
pMaxima
pMinima
pValues <- as.vector(unlist(sitka[nm]))
output<-do.call(fr3PGDN,sitka)
modelled <-sampleOutput(output,startYear,endYear)
observed <- c(data$gpp,                ## GPP
data$npp,                ## NPP
data$nee,                ## NEE
data$reco,               ## Reco
data$rs,                 ## Rs
data$et,                 ## Etransp
data$gs[2:nrow(data)],   ## CanCond
5.7,5.56,                ## LAI
1348,                    ## N
24.1,                    ## dg
4.88,                    ## Wr
0.53,                    ## difRoots
86.7,                    ## totC, see jarvis_total_soil.ods
2.16                     ## totN, 40 C:N ratio
)
dev <- c(rep(3,nrow(filter(data,year>=startYear&year<=endYear))),
rep(5,nrow(filter(data,year>=startYear&year<=endYear))),
rep(5,nrow(filter(data,year>=startYear&year<=endYear))),
rep(5,nrow(filter(data,year>=startYear&year<=endYear))),
rep(5,nrow(filter(data,year>=startYear&year<=endYear))),
rep(10,nrow(filter(data,year>=startYear&year<=endYear))),
rep(0.05,(nrow(filter(data,year>=startYear&year<=endYear))-1)),
1.5,1.5,
100,
3.0,
2.0,
1.0,
30.0,
1.0
)
NLL <- function(p){
sitka[.GlobalEnv$nm]<-p
output<-do.call(fr3PGDN,sitka)
modelled <-sampleOutput(output,.GlobalEnv$startYear,.GlobalEnv$endYear)
NlogLik  <- sum(dnorm(.GlobalEnv$observed,mean=modelled,sd=dev,log=T))
return(NlogLik)
}
## This is a uniform prior distribution
Uprior <- createUniformPrior(lower = pMinima, upper = pMaxima)
## ~~~~~~~~~~~~~~~~~~~~~~~~~ ##
## Create the Bayesian setup ##
## ~~~~~~~~~~~~~~~~~~~~~~~~~ ##
BS3PGDN <- createBayesianSetup(likelihood = NLL, prior = Uprior, names = nm, parallel = T, catchDuplicates = F )
## Choose the settings for the run
settings = list(
iterations = 5000,
## Z = NULL,
startValue = 2, #t(mP),#NULL, ## Use 5 chains instead of 3
nrChains = 1,
pSnooker = 0.5,
burnin = 1000,
## thin = 1,
## f = 2.38,
## eps = 0,
parallel = F,
## pGamma1 = 0.1,
## eps.mult = 0.2,
## eps.add = 0,
## consoleUpdates = 100,
## zUpdateFrequency = 1,
## currentChain = 3,
## blockUpdate  = list("none",
##                     k = NULL,
##                     h = NULL,
##                     pSel = NULL,
##                     pGroup = NULL,
##                     groupStart = 1000,
##                     groupIntervall = 1000),
message = TRUE)
## Choose the settings for the run
settings = list(
iterations = 5000,
## Z = NULL,
startValue = 2, #t(mP),#NULL, ## Use 5 chains instead of 3
nrChains = 1,
pSnooker = 0.5,
burnin = 1000,
## thin = 1,
## f = 2.38,
## eps = 0,
parallel = T,
## pGamma1 = 0.1,
## eps.mult = 0.2,
## eps.add = 0,
## consoleUpdates = 100,
## zUpdateFrequency = 1,
## currentChain = 3,
## blockUpdate  = list("none",
##                     k = NULL,
##                     h = NULL,
##                     pSel = NULL,
##                     pGroup = NULL,
##                     groupStart = 1000,
##                     groupIntervall = 1000),
message = TRUE)
##  Run the Monte Carlo Markov Chain
out <- runMCMC(bayesianSetup = BS3PGDN, sampler = "DEzs", settings = settings)
Uprior
Uprior[[19]]
pValues
pMinima
## This is a uniform prior distribution
pMaxima[[19]]
## This is a uniform prior distribution
pMaxima[[19]]<-0.01
Uprior <- createUniformPrior(lower = pMinima, upper = pMaxima)
## ~~~~~~~~~~~~~~~~~~~~~~~~~ ##
## Create the Bayesian setup ##
## ~~~~~~~~~~~~~~~~~~~~~~~~~ ##
BS3PGDN <- createBayesianSetup(likelihood = NLL, prior = Uprior, names = nm, parallel = T, catchDuplicates = F )
## Choose the settings for the run
settings = list(
iterations = 5000,
## Z = NULL,
startValue = 2, #t(mP),#NULL, ## Use 5 chains instead of 3
nrChains = 1,
pSnooker = 0.5,
burnin = 1000,
## thin = 1,
## f = 2.38,
## eps = 0,
parallel = T,
## pGamma1 = 0.1,
## eps.mult = 0.2,
## eps.add = 0,
## consoleUpdates = 100,
## zUpdateFrequency = 1,
## currentChain = 3,
## blockUpdate  = list("none",
##                     k = NULL,
##                     h = NULL,
##                     pSel = NULL,
##                     pGroup = NULL,
##                     groupStart = 1000,
##                     groupIntervall = 1000),
message = TRUE)
##  Run the Monte Carlo Markov Chain
out <- runMCMC(bayesianSetup = BS3PGDN, sampler = "DEzs", settings = settings)
library(fr3PGDN)
## ~~~~~~~~~~~~~~~~~~~~~~~~~ ##
## Create the Bayesian setup ##
## ~~~~~~~~~~~~~~~~~~~~~~~~~ ##
BS3PGDN <- createBayesianSetup(likelihood = NLL, prior = Uprior, names = nm, parallel = T, catchDuplicates = F )
## Choose the settings for the run
settings = list(
iterations = 5000,
## Z = NULL,
startValue = 2, #t(mP),#NULL, ## Use 5 chains instead of 3
nrChains = 1,
pSnooker = 0.5,
burnin = 1000,
## thin = 1,
## f = 2.38,
## eps = 0,
parallel = T,
## pGamma1 = 0.1,
## eps.mult = 0.2,
## eps.add = 0,
## consoleUpdates = 100,
## zUpdateFrequency = 1,
## currentChain = 3,
## blockUpdate  = list("none",
##                     k = NULL,
##                     h = NULL,
##                     pSel = NULL,
##                     pGroup = NULL,
##                     groupStart = 1000,
##                     groupIntervall = 1000),
message = TRUE)
##  Run the Monte Carlo Markov Chain
out <- runMCMC(bayesianSetup = BS3PGDN, sampler = "DEzs", settings = settings)
out$chain
plot(out$chain)
as.data.frame(out$chain)
coda(out$chain)
?runMCMC
as.data.frame(getSample(out, start = 500, coda = TRUE))
getSample(out, start = 500, coda = TRUE)
codM<-getSample(out, start = 500, coda = TRUE)
#Key of terminology
#NPP - net primary production
#GPP - gross primary production
#NEE - Net ecosystem exchange
#Rs - soil respiration
#Reco - ecosystem respiration
codM<-getSample(out, start = 500, coda = TRUE)
codM
codM[[1]]
as.data.frame(codM[[1]])
#Key of terminology
#NPP - net primary production
#GPP - gross primary production
#NEE - Net ecosystem exchange
#Rs - soil respiration
#Reco - ecosystem respiration
codM<-getSample(out, start = 500, coda = TRUE)
codM<-as.data.frame(codM[[1]])
colMedians(codM)
transpose(data.frame(colMedians(codM)))
codM<-transpose(data.frame(colMedians(codM)))
names(codM)<-nm
codM
sitka[nm]<-codM
## Run the 3PGN model using the sitka parameters
output<-do.call(fr3PGDN,sitka)
## Plot model outputs
pOut <- plotModel(output)
## Plot the timeseries of model output vs data
results<-plotResults(output)
results[[7]]
#Key of terminology
#NPP - net primary production
#GPP - gross primary production
#NEE - Net ecosystem exchange
#Rs - soil respiration
#Reco - ecosystem respiration
codM<-getSample(out, start = 500, coda = TRUE)
codM<-as.data.frame(codM[[1]])
codM<-transpose(data.frame(tail(codM,1)))
names(codM)<-nm
sitka[nm]<-codM
#Key of terminology
#NPP - net primary production
#GPP - gross primary production
#NEE - Net ecosystem exchange
#Rs - soil respiration
#Reco - ecosystem respiration
codM<-getSample(out, start = 500, coda = TRUE)
codM<-as.data.frame(codM[[1]])
codM<-transpose(data.frame(tail(codM,1)))
names(codM)<-nm
codM
#Key of terminology
#NPP - net primary production
#GPP - gross primary production
#NEE - Net ecosystem exchange
#Rs - soil respiration
#Reco - ecosystem respiration
codM<-getSample(out, start = 500, coda = TRUE)
codM<-as.data.frame(codM[[1]])
data.frame(tail(codM,1)
#Key of terminology
#NPP - net primary production
#GPP - gross primary production
#NEE - Net ecosystem exchange
#Rs - soil respiration
#Reco - ecosystem respiration
codM<-getSample(out, start = 4000, coda = TRUE)
codM<-as.data.frame(codM[[1]])
#Key of terminology
#NPP - net primary production
#GPP - gross primary production
#NEE - Net ecosystem exchange
#Rs - soil respiration
#Reco - ecosystem respiration
codM<-getSample(out, start = 3000, coda = TRUE)
#Key of terminology
#NPP - net primary production
#GPP - gross primary production
#NEE - Net ecosystem exchange
#Rs - soil respiration
#Reco - ecosystem respiration
codM<-getSample(out, start = 2000, coda = TRUE)
codM<-as.data.frame(codM[[1]])
codM<-transpose(data.frame(tail(codM,1)))
names(codM)<-nm
sitka[nm]<-codM
#Key of terminology
#NPP - net primary production
#GPP - gross primary production
#NEE - Net ecosystem exchange
#Rs - soil respiration
#Reco - ecosystem respiration
codM<-getSample(out, start = 2000, coda = TRUE)
codM<-as.data.frame(codM[[1]])
codM<-transpose(data.frame(colMedians(codM)))
names(codM)<-nm
sitka[nm]<-codM
## Run the 3PGN model using the sitka parameters
output<-do.call(fr3PGDN,sitka)
## Plot model outputs
pOut <- plotModel(output)
## Plot the timeseries of model output vs data
results<-plotResults(output)
results[[7]]
codM
results[[1]]
results[[2]]
results[[3]]
Uprior
## Choose the settings for the run
settings = list(
iterations = 25000,
## Z = NULL,
startValue = 2, #t(mP),#NULL, ## Use 5 chains instead of 3
nrChains = 1,
pSnooker = 0.5,
burnin = 1000,
## thin = 1,
## f = 2.38,
## eps = 0,
parallel = T,
## pGamma1 = 0.1,
## eps.mult = 0.2,
## eps.add = 0,
## consoleUpdates = 100,
## zUpdateFrequency = 1,
## currentChain = 3,
## blockUpdate  = list("none",
##                     k = NULL,
##                     h = NULL,
##                     pSel = NULL,
##                     pGroup = NULL,
##                     groupStart = 1000,
##                     groupIntervall = 1000),
message = TRUE)
##  Run the Monte Carlo Markov Chain
out <- runMCMC(bayesianSetup = BS3PGDN, sampler = "DEzs", settings = settings)
nm
##  Run the Monte Carlo Markov Chain
out <- runMCMC(bayesianSetup = BS3PGDN, sampler = "DEzs", settings = settings)
#Key of terminology
#NPP - net primary production
#GPP - gross primary production
#NEE - Net ecosystem exchange
#Rs - soil respiration
#Reco - ecosystem respiration
codM<-getSample(out, start = 2000, coda = TRUE)
codM<-as.data.frame(codM[[1]])
codM<-transpose(data.frame(colMedians(codM)))
names(codM)<-nm
sitka[nm]<-codM
## Run the 3PGN model using the sitka parameters
output<-do.call(fr3PGDN,sitka)
## Plot model outputs
pOut <- plotModel(output)
## Plot the timeseries of model output vs data
results<-plotResults(output)
results[[3]]
## Calculate yield class from height
output <- output%>%mutate(
yct = ((hdom/(1-exp(-0.033329*t.proj))^1.821054)-14.856317)/1.425397,
YC = ifelse(yct>24,24,ifelse(yct<4,4,yct))
)
## jpeg(file="results_3PGN.jpg",width=1800,height=1000,res=100)
egg::ggarrange(plots=results,labels=c("a","b","c","d","e","f","g","h","i","j","k","l","m","n"),nrow=7,ncol=2)
plot(out)
#Key of terminology
#NPP - net primary production
#GPP - gross primary production
#NEE - Net ecosystem exchange
#Rs - soil respiration
#Reco - ecosystem respiration
codM<-getSample(out, start = 2000, coda = TRUE)
mcmc_trace(codM)
2416.42 *12
